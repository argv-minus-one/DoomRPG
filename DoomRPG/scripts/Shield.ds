#include "RPG.dh"

#include "Arena.dh"
#include "Augs.dh"
#include "Map.dh"
#include "Menu.dh"
#include "Popoffs.dh"
#include "Shield.dh"
#include "Shop.dh"
#include "Stats.dh"
#include "Utils.dh"

AddressSpace GlobalArray(4) ShieldSpace;

ShieldSpace int[3] ShieldPartsMax;
ShieldSpace ShieldPart[3][MAX_PARTS] ShieldParts;
ShieldSpace ShieldAccessory[MAX_ACCESSORIES] ShieldAccessories;

script void BuildShieldParts()
{
    ShieldPartsMax =
    {
        MAX_BODIES;
        MAX_BATTERIES;
        MAX_CAPACITORS;
    };

    // Actor, Name, Icon, Description, Capacity, Charge Rate, Delay Rate
    
    /*  Shield Part Color Revamp by Yhollikins
        
        Basically, because each part kinda has a thing it tries to do the most, it'll default to that unless other stuff happens.
        I'm not sure that sentence made much sense. Whatever I DONT CAAAAARrrrreeee
        ~ how2english with Yholl
        
        Light Blue	\cv		Increased Capacity
        Blue		\ch		Decreased Capacity
        Green		\cd		Increased Charge
        Dark Green	\cq		Decreased Charge
        Dark Red	\cr		Increased Delay
        Red			\cg		Decreased Delay
        
    */
    
    ShieldParts[0] =
    // Bodies
    {
        { "DRPGShieldBody1";        "\cvUAC";               "SHBOA0"; 25;   0;   0;    };
        { "DRPGShieldBody2";        "\cvXTron";             "SHBOB0"; 50;   0;   0;    };
        { "DRPGShieldBody3";        "\crBlack Mesa";        "SHBOC0"; 150;  0;   2;    };
        { "DRPGShieldBody4";        "\cvEDF";               "SHBOD0"; 100;  0;   0;    };
        { "DRPGShieldBody5";        "\cdCyberdyne Systems"; "SHBOE0"; 80;   2;   0;    };
        { "DRPGShieldBody6";        "\cvMisfit Tech";       "SHBOF0"; 150;  0;   0;    };
        { "DRPGShieldBody7";        "\cqShadaloo";          "SHBOG0"; 400;  -1;  4;    };
        { "DRPGShieldBody8";        "\cvArkai";             "SHBOH0"; 250;  0;   0;    };
        { "DRPGShieldBody9";        "\cgIronclad Inc.";     "SHBOI0"; 150;  0;   -2;   };
        { "DRPGShieldBody10";       "\cdYholl";             "SHBOJ0"; 50;   5;   -3;   };
        { "DRPGShieldBody11";       "\cdHyperix";           "SHBOK0"; 200;  1;   -1;   };
        { "DRPGShieldBody12";       "\crXaser Inc.";        "SHBOL0"; 500;  0;   2.5;  };
        { "DRPGShieldBody13";       "\cddataDyne";          "SHBOM0"; 250;  3;   -1;   };
        { "DRPGShieldBody14";       "\cdStarbright";        "SHBON0"; 400;  2;   -1;   };
        { "DRPGShieldBody15";       "\cqHellsing";          "SHBOO0"; 666;  -1;  0;    };
        { "DRPGShieldBody16";       "\cvS.H.I.E.L.D.";      "SHBOP0"; 500;  0;   0;    };
        { "DRPGShieldBody17";       "\cgUAC Elite";         "SHBOQ0"; 400;  1;   -3;   };
        { "DRPGShieldBody18";       "\cdStark Industries";  "SHBOR0"; 550;  1;   -1;   };
        { "DRPGShieldBody19";       "\cdWeyland-Yutani";    "SHBOS0"; 100;  7;   0;    };
        { "DRPGShieldBody20";       "\crMegalith";          "SHBOT0"; 750;  0;   5;    };
        { "DRPGShieldBody21";       "\cgReaper Industries"; "SHBOU0"; 444;  4;   -4;   };
        { "DRPGShieldBody22";       "\crEternity Systems";  "SHBOV0"; 2000; 0;   15;   };
    };
    
    ShieldParts[1] =
    // Batteries
    {
        { "DRPGShieldBattery1";     "\cvCrappy";           "SHBAA0"; 25;   0;   0;    };
        { "DRPGShieldBattery2";     "\cdBullet";           "SHBAB0"; 50;   1;   0;    };
        { "DRPGShieldBattery3";     "\cgElegant";          "SHBAC0"; 20;   0;   -3;   };
        { "DRPGShieldBattery4";     "\cdSpiked";           "SHBAD0"; 100;  1;   0;    };
        { "DRPGShieldBattery5";     "\cvStubborn";         "SHBAE0"; 250;  0;   0;    };
        { "DRPGShieldBattery6";     "\cdMirrored";         "SHBAF0"; 150;  2;   0;    };
        { "DRPGShieldBattery7";     "\cdRefined";          "SHBAG0"; 100;  2;   -1;   };
        { "DRPGShieldBattery8";     "\cdClustered";        "SHBAH0"; 200;  3;   0;    };
        { "DRPGShieldBattery9";     "\cdWinged";           "SHBAI0"; 250;  4;   0;    };
        { "DRPGShieldBattery10";    "\cdOvercharged";      "SHBAJ0"; 10;   5;   -2;   };
        { "DRPGShieldBattery11";    "\cvSuperb";           "SHBAK0"; 425;  1;   0;    };
        { "DRPGShieldBattery12";    "\crRedundant";        "SHBAL0"; 50;   30;  15;   };
        { "DRPGShieldBattery13";    "\cvReinforced";       "SHBAM0"; 1000; 2;   2.5;  };
    };
    
    ShieldParts[2] =
    // Capacitors
    {
        { "DRPGShieldCapacitor1";   "\cdStandard";         "SHCAA0"; 0;     1;   0;   };
        { "DRPGShieldCapacitor2";   "\cdOutdated";         "SHCAB0"; 0;     3;   2;   };
        { "DRPGShieldCapacitor3";   "\cdCooled";           "SHCAC0"; 0;     2;   0;   };
        { "DRPGShieldCapacitor4";   "\cvWarm";             "SHCAD0"; 25;    1;   0;   };
        { "DRPGShieldCapacitor5";   "\crInefficient";      "SHCAE0"; 0;     6;   5;   };
        { "DRPGShieldCapacitor6";   "\cdEnergized";        "SHCAF0"; 0;     3;   0;   };
        { "DRPGShieldCapacitor7";   "\cdInfused";          "SHCAG0"; 0;     4;   0;   };
        { "DRPGShieldCapacitor8";   "\cvPlasmatic";        "SHCAH0"; 100;   3;   0;   };
        { "DRPGShieldCapacitor9";   "\cdBurning";          "SHCAI0"; 0;     5;   0;   };
        { "DRPGShieldCapacitor10";  "\cgPulsating";        "SHCAJ0"; 0;     1;   -5;  };
        { "DRPGShieldCapacitor11";  "\cdFiery";            "SHCAK0"; 0;     5;   -1;  };
        { "DRPGShieldCapacitor12";  "\cvEternal";          "SHCAL0"; 500;   1;   3;   };
        { "DRPGShieldCapacitor13";  "\cdOverloaded";       "SHCAM0"; 0;     10;  1;   };
        { "DRPGShieldCapacitor14";  "\crDark";             "SHCAN0"; 1000;  -1;  15;  };
        { "DRPGShieldCapacitor15";  "\cgChaotic";          "SHCAO0"; 0;     7;   -7;  };
    };
    
    int AccessoryIndex = 0;
        /*
            [KS] For regular shield modifiers, the same convention applies as standard shield parts.
            For stat-based or mechanic-based shields, they're colored by their stats, as below
            
            Red         \cg     Strength / Damaging Accessories
            Pink        \ca     Vitality / Health Accessories
            Orange      \ci     Agility / Speed Accessories
            Green       \cd     Defense / Armor Accessories
            Gold        \cf     Luck / Money / Converter Accessories
            Blue        \cn     Energy and EP Accessories
            Purple      \ct     Regeneration Accessories (None currently)
            Dark Blue   \ch     Capacity and Ammo-related Accessories
            Yellow      \ck     Rank-related Accessories
            Grey        \cc     Augmentation-related Accessories
            Dark Green  \cq     Powerup-related Accessories
            White       \cj     Miscellaneous / Multi-Category Accessories
            
            White       /cj     Bullet
            Grey        \cc     Melee
            Red         \cg     Fire
            Blue        \cn     Plasma
            
            Sorry, there is no color for Propane and Propane Accessories
        */
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory1";
        "\cgX-7";       "SHACA0";   18000;
        "\cg2x Melee Damage";
        SHIELD_PASS_NONE;
        X7Mod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory2";
        "\caSGENX-5b";  "SHACB0";   25000;
        "\cfConverter\c-: When full, restores \cgHealth\c-";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; HealthConversion; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory3";
        "\cgAMP-3000";  "SHACC0";   40000;
        "\cg2x Damage\c- when full\nHalves \cvCapacity\c- on attack";
        SHIELD_PASS_NONE;
        AmpShieldMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory4";
        "\cgHRY-VP80";  "SHACD0";   20000;
        "\cv-50% Capacity\n\ca-50% Delay";
        SHIELD_PASS_NONE;
        HurryMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory5";
        "\cvDEF-2";     "SHACE0";   20000;
        "\cv2x Capacity\n\ca2x Delay";
        SHIELD_PASS_NONE;
        Def2Mod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory6";
        "\cdB1-ZUT3";   "SHACF0";   20000;
        "\cd2x Charge Rate\n\cv-50% Capacity";
        SHIELD_PASS_NONE;
        BlzutMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
     ShieldAccessories[AccessoryIndex++] =
   {
        "DRPGShieldAccessory7";
        "\chCNV-RT99";  "SHACG0";   12000;
        "Instead of fast charging with \cnEP\c-, uses 1 \cdCell\c- per 10 \cvCapacity";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; CellFastCharge; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory8";
        "\cfREK-T50";   "SHACH0";   15000;
        "\cd-100% Damage Reduction\c-\nTriples monster killing \cfpayout bonus";
        SHIELD_PASS_EPICMEGACASH;
        RektMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory9";
        "\ciUW-0t";     "SHACI0";   50000;
        "When your \cisurvival bonus\c- goes off, your \cvShield\c- reactivates and is \cdfully recharged";
        SHIELD_PASS_SURVIVECHARGE;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory10";
        "\cqCU-256";    "SHACJ0";   12000;
        "When full, gives \cqLight Amplification\c- power";
        SHIELD_PASS_NONE;
        LightAmpMod; nullptr; LightAmpUnequip; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory11";
        "\caTX-BGONN";  "SHACK0";   15000;
        "When full, immune to \cdToxicity";
        SHIELD_PASS_NOTOXIC;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory12";
        "\cqWRP30-LITE";"SHACL0";   12000;
        "When full, gives \cqInvisibility\c- power";
        SHIELD_PASS_NONE;
        InvisibilityMod; nullptr; InvisibilityUnequip; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory13";
        "\cgNOV-A2";    "SHACM0";   45000;
        "1 in 4 chance of emitting \cnBFG Balls\c- when \cvShield\c- is depleted";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; NovaShieldBreak; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory14";
        "\cdLZ-Y200";   "SHACN0";   20000;
        "\cd2x Charge Rate\n\cgOnly charges while standing still";
        SHIELD_PASS_NONE;
        LazyMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory15";
        "\cvBST-700";   "SHACO0";   25000;
        "Randomly drops \cvShield Boosters\c- when hit";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; BoosterShieldDamage; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory16";
        "\cnPH-D88";    "SHACP0";   75000;
        "\cfConverter\c-: When full, recharges \cnEP\c-";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; EPConversion; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory17";
        "\ccBATT-B";    "SHACQ0";   120000;
        "\cfConverter\c-: When full, recharges \ckAugmentation Battery\c-";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; BatteryConversion; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory18";
        "\chSHVR-Z7";   "SHACR0";   35000;
        "\cfConverter\c-: When full, produces \ccClips\c- and \ciShells\c-";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; AmmoConversion; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory19";
        "\cdMM-12";     "SHACS0";   28000;
        "\cdCharge Rate\c- scales based on current \cvShield Charge\c-\nThe higher, the faster";
        SHIELD_PASS_NONE;
        AccelerativeShieldMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory20";
        "\cgMRTE-KRAR"; "SHACT0";   38000;
        "\cv-50% Capacity\n\cg1.5x Damage";
        SHIELD_PASS_NONE;
        TheKillingBoosterMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory21";
        "\cqSP-00k";    "SHACU0";   30000;
        "1 in 8 chance of getting \cqGhosted\c- when hit";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; SpookyDamage; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory22";
        "\cjRR-G0";     "SHACV0";   70000;
        "Scales your \cdCharge Rate\c- up and \caDelay\c- down based on how long you've been in a level";
        SHIELD_PASS_NONE;
        MinuteMaidMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory23";
        "\cqE1N-T31";   "SHACW0";   90000;
        "1 second \cqTime Freeze\c- when hit";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; TimeyWimeyHurtyBall; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory24";
        "\ckPATR-0T";   "SHACX0";   45000;
        "Scales your \cvCapacity\c- based off your \ckRank";
        SHIELD_PASS_NONE;
        AmericaShieldMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory25";
        "\cfRNJSUS-2";  "SHACY0";   45000;
        "Scales off of your \cfLuck\c- inversely\nWith 100+ \cfLuck\c-, it has no effect\nwith 0 \cfLuck\c-, it's equivalent to having 50 \cfLuck";
        SHIELD_PASS_NONE;
        GhettoLuckMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory26";
        "\cnPWAA-9001"; "SHACZ0";   80000;
        "Uses the \cdnext level up\c- of your current \cnSkill\c- for the cost of the current";
        SHIELD_PASS_SKILLPLUS;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory27";
        "\ccAW-G01";    "SHA2A0";   80000;
        "Acts as an \ckAugmentation Slot Upgrade";
        SHIELD_PASS_AUGSLOT;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory28";
        "\cjSCL-AR53";  "SHA2B0";   200000;
        "Uses your stats as a percentage to modify \cvShield\c- stats\n\chCapacity\c- for \cvCapacity\n\cnEnergy\c- for \cdCharge Rate\n\ctRegeneration\c- for reducing \caDelay";
        SHIELD_PASS_NONE;
        SuperSqueezyScalarMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory29";
        "\cqRF-CT";     "SHA2C0";   125000;
        "\cqReflects\c- when hit";
        SHIELD_PASS_NONE;
        ReflectionMod; nullptr; ReflectionUnequip; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory30";
        "\cdTEW-11";     "SHA2D0";  22000;
        "When your \cvShield\c- reaches \cdfull charge\c-, it \cnmemorizes\c- where you last were\nWhen your \cvShield\c- is \cgdepleted\c-, it \cdteleports\c- you to that location";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; TeleportBreak; nullptr; nullptr; nullptr; TeleportFullCharge;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory31";
        "\cdNU-YU5";     "SHA2E0";  39000;
        "If you are killed with your \cvShield\c- active, you respawn with it full and \cd90% Damage Reduction\c- for 6 seconds";
        SHIELD_PASS_HYPERION;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory32";
        "\cdADPT-V15";   "SHA2F0";  45000;
        "When your \cvShield\c- is \cgdepleted\c-, it gives you \cd50% Resistance\c- for 15 seconds against the damage type that finished it off";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; AdaptiveBreak; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory33";
        "\cdTENS-H11";   "SHA2G0";  55000;
        "The lower your shield is, the higher your \cdDamage Reduction\c- is\nIt scales up to \cd75%\c- at \cv1 Capacity\c-\nWhen \cgfully depleted\c-, \cd0% Damage Reduction";
        SHIELD_PASS_NONE;
        ScarletWeatherRhapsodyShieldMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory34";
        "\cdTEEM-AU5";   "SHA2H0";  50000;
        "While under the effects of an aura, each other person affected by that aura gains \cd+20% Damage Reduction\c-\n\cuThis does not stack with multiple auras";
        SHIELD_PASS_DATAURA;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory35";
        "\cgVENG-R";     "SHA2I0";  62000;
        "When an ally is killed, you gain \cg1.5x Damage\c- and \cd+50% Damage Reduction\c- for 30 seconds";
        SHIELD_PASS_AVENGER;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory36";
        "\ciSANIC-S88";  "SHA2J0";  88000;
        "The faster you move, the faster your \cvShield\c- charges";
        SHIELD_PASS_NONE;
        SanicMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory37";
        "\cdNAKD-N0W";   "SHA2K0";  20000;
        "While you \caaren't wearing armor\c-, you have \cd+25% Damage Reduction\c-";
        SHIELD_PASS_NONE;
        NakedMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory38";
        "\cgHA3-L1N";   "SHA2L0";   65000;
        "Whenever you \cgkill an enemy\c-, your shield recharges \ct5x\c- as fast for 3 seconds";
        SHIELD_PASS_BLOODYSHIELDSOREAL;
        BloodyShieldSoRealMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory39";
        "\cqHAET-60";   "SHA2M0";   120000;
        "When you use a \cgBerserk Pack\c-, you gain \cd99% Resistance\c- to \ccMelee Damage\c- for 60 seconds";
        SHIELD_PASS_HATEHATEHATE;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory40";
        "\cdPHA-LX2";   "SHA2N0";   33000;
        "You gain an additional \cd+10% Damage Reduction\c- for every player using this accessory";
        SHIELD_PASS_FRIENDSHIPISDEFENSE;
        FriendshipShieldMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory41";
        "\cgIKU-N7";    "SHA2O0";   38000;
        "Whenever you \catake damage\c-, you release a \cnsmall electrical blast\c- that stuns enemies\nIf your \cvShield\c- is \cgdepleted\c-, it releases a \cnlarge blast\c-";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; StaticChargeShieldDamage; StaticChargeShieldBreak; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory42";
        "\cdREGN-ER8";  "SHA2P0";   52000;
        "\cdCharge Rate\c- scales based on how long since your \cvShield\c- took damage\nFrom \cg0.5x\c- after being hit to \cd4x\c-";
        SHIELD_PASS_NONE;
        RegenShieldMod; nullptr; nullptr; RegenShieldDamage; nullptr; RegenShieldCharge; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory43";
        "\cgCOUN-TR20"; "SHA2Q0";   46000;
        "Whenever you are struck with \ccMelee Damage\c-, you emit a powerful \cnRepulsion\c- blast";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; CounterDamage; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory44";
        "\cvPRO-100";   "SHA2R0";   83000;
        "Gives an additional \cv+100 Capacity\c- for every stat at or over 100";
        SHIELD_PASS_NONE;
        MLGNoScopeShieldMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory45";
        "\ciRUS-ROU1";  "SHA2S0";   48000;
        "\cd-1000% Damage Reduction\n\ci5 In 6 Survival Bonus\c-";
        SHIELD_PASS_ROULETTE; // To bypass the 75% survival cap
        RussianRouletteMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory46";
        "\cjOCD-MX90";  "SHA2T0";   108000;
        "Every level you \cd100% complete\c- gives you:\n\cv+20 Capacity\n\cd+0.5 Charge Rate\n\ca-0.2 Delay";
        SHIELD_PASS_NONE;
        OCDShieldMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory47";
        "\cjMASTA-R4";  "SHA2U0";   100000;
        "Every new wave of \caThe Arena\c- you complete gives you:\n\cv+10 Capacity\n\cd+0.25 Charge Rate\n\ca-0.1 Delay";
        SHIELD_PASS_NONE;
        ArenaShieldMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory48";
        "\cjHOW-EV3N";  "SHA2V0";   500000;
        "Swaps \caDelay\c- and \cdCharge Rate\c-";
        SHIELD_PASS_NONE;
        HowDidYouEvenMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory49";
        "\cgK00-LAYD";  "SHA2W0";   62000;
        "Upon entering a non-Outpost level, releases an \cgexplosive blast\c- that kills most monsters around you";
        SHIELD_PASS_NONE;
        OhYeahMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory50";
        "\cvSKROO-G3";  "SHA2X0";   111111;
        "\cv+50 Capacity\c- for every \cf10000 Credits\c- you currently have\nCaps at a maximum of \cf1000000 Credits\c- and \cv+5000 Capacity\n";
        SHIELD_PASS_NONE;
        McDuckMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory51";
        "\chINFI-NT1";  "SHA2Y0";   200000;
        "\cg25% \cvCapacity\n\cg50% \cdCharge Rate\n\cg400% \caDelay\nYou have \cqinfinite ammo\c- while your \cvShield\c- is full";
        SHIELD_PASS_NONE;
        AmmoSpaceMod; nullptr; AmmoSpaceUnequip; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory52";
        "\cgREMI-500";  "SHA2Z0";   110000;
        "\cgYour Shield does not recharge\nInstead, every kill charges \cvShield\c- for 10% of the enemy's \camax health";
        SHIELD_PASS_KILLSCHARGE;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory53";
        "\cgFLAN-495";  "SHA2[0";   120000;
        "When your \cvShield\c- is \cgdepleted\c- or \cdreaches full charge\c-, enemies around you \cgexplode\c-";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; FlanExplosion; nullptr; nullptr; nullptr; FlanExplosion;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory54";
        "\cgTOJ1-K0";   "SHA2\\0";   55000;
        "Every time your \cvShield\c- charges, it emits \cnlightning bolts\c-\nThe higher your \cdCharge Rate\c-, the more \cnlightning\c- your \cvShield\c- emits";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; nullptr; LightningCharge; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory55";
        "\ccTRANS-EB2S2";   "SHA2]0";   40000;
        "If your \ckAugmentation Battery\c- is full, \cv2x Capacity\c-";
        SHIELD_PASS_NONE;
        TheAmazingBatteryShieldMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory56";
        "\cvLIL-ZZ8";   "SHA3A0";   13000;
        "Adds \cdCharge Rate\c- to \cvCapacity\c-";
        SHIELD_PASS_NONE;
        LilZiggyMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory57";
        "\cgMURD-BURD"; "SHA3B0";   85000;
        "Every \cgkill\c- made on the current level grants \cv+10 Capacity\c-";
        SHIELD_PASS_NONE;
        MurderBurgerMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory58";
        "\cfLKY-BSTRD4";    "SHA3C0";   32000;
        "Adds \cfLuck\c- to \ciAgility\c- for the purpose of calculating \ciSurvival Bonus\c-";
        SHIELD_PASS_NONE;
        LuckyBastardMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory59";
        "\caHEL-FY20";  "SHA3D0";   52000;
        "Every \ca100 Health\c- you have adds \cv+20 Capacity\c-";
        SHIELD_PASS_NONE;
        IronShieldMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory60";
        "\cnMUN3-MAG";  "SHA3E0";   33000;
        "Triples the amount of \cfCredits\c- gained from using \cnMagnetize\c-";
        SHIELD_PASS_DOSHMAGNET;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory61";
        "\cnEFF-C13";   "SHA3F0";   80000;
        "\cn25%\c- of not using \cnEP\c- when using a \cnSkill\c-";
        SHIELD_PASS_MORESKILLS;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory62";
        "\cnSYN-C3P";   "SHA3G0";   95000;
        "\cnEP Regen\c- is substituted for \cdCharge Rate\c-";
        SHIELD_PASS_NONE;
        EPRegenSwapperMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory63";
        "\cnTUFF-MAG3"; "SHA3H0";   54000;
        "\cn10%\c- of the cost of a used \cnSkill\c- is added to your \cvShield\c-";
        SHIELD_PASS_SKILLTOSHIELD;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory64";
        "\cnUBR-MANZ5"; "SHA3I0";   220000;
        "Whenever you gain \cnEP\c- with \cnEP\c- maxed, you gain the amount in \caHealth\c- and \cvShield\c- instead";
        SHIELD_PASS_EPOVERFLOW;
        nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory65";
        "\cqHORD-3RR";  "SHA3J0";   29000;
        "While a \cqpowerup\c- is active, you gain 2x of your base \cdcharge rate\c-\n\cdStacks with multiple different powerups\c-";
        SHIELD_PASS_NONE;
        HoarderMod; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr; nullptr;
    };
    ShieldAccessories[AccessoryIndex++] =
    {
        "DRPGShieldAccessory66";
        "\cdS-SP4G3TT"; "SHA3K0";   36000;
        "Whenever your \cvShield\c- is \cgdepleted\c-, your \cdArmor\c- is fully repaired\n\cgShield must fully recharge between uses";
        SHIELD_PASS_NONE;
        nullptr; nullptr; nullptr; nullptr; SpaghettiShieldBreak; nullptr; nullptr; nullptr; SpaghettiShieldFullCharge;
    };
};

acscript void AMShieldCharge()
{
    if (!Player.Shield.Active || !Player.Shield.Accessory || Player.Shield.Accessory->PassiveEffect != SHIELD_PASS_HATEHATEHATE)
        return;
    
    GiveInventory("DRPGShieldHateHateHateDefense", 1);
};

// Callback scripts

// Converters
script void HealthConversion(int Charge)
{
    Player.Shield.AccessoryBattery += Charge;
    
    while (Player.Shield.AccessoryBattery >= 5)
    {
        // FadeRange(255, 0, 255, 0.25, 255, 0, 255, 0, 0.25);
        AddHealthDirect(1, 100);
        Player.Shield.AccessoryBattery -= 5;
    };
};

script void EPConversion(int Charge)
{
    Player.Shield.AccessoryBattery += Charge;
    
    while (Player.Shield.AccessoryBattery >= 2)
    {
        // FadeRange(0, 255, 255, 0.25, 0, 255, 255, 0, 0.25);
        AddEP(1, true);
        Player.Shield.AccessoryBattery -= 2;
    };
};

script void BatteryConversion(int Charge)
{
    Player.Shield.AccessoryBattery += Charge;
    
    while (Player.Shield.AccessoryBattery >= 32)
    {
        // FadeRange(255, 255, 0, 0.25, 255, 255, 0, 0, 0.25);
        AddBattery(1);
        Player.Shield.AccessoryBattery -= 32;
    };
};

script void AmmoConversion(int Charge)
{
    Player.Shield.AccessoryBattery += Charge;
    
    while (Player.Shield.AccessoryBattery >= 4)
    {
        // FadeRange(0, 0, 255, 0.25, 0, 0, 255, 0, 0.25);
        GiveInventory("Clip", 2);
        GiveInventory("Shell", 1);
        Player.Shield.AccessoryBattery -= 4;
    };
};

// Standard Charging
script int LightningCharge(int ChargeAmount)
{
    if (Player.Shield.Full) return ChargeAmount;
    
    int NumBolts = 0;
    for (int i = 0; i < ChargeAmount; i++)
        if (!Random(0, 3))
            NumBolts++;
    
    if (!NumBolts) return ChargeAmount;
    
    for (; NumBolts > 0; NumBolts--)
        GiveInventory("DRPGShieldLightningAttack", 1);
    
    PlaySound(0, "shield/lightning", CHAN_AUTO, 1.0, false, 1.0);
    return ChargeAmount;
};

script int RegenShieldCharge(int ChargeAmount)
{
    if (Player.Shield.AccessoryBattery < 20)
        Player.Shield.AccessoryBattery++;
    
    return ChargeAmount;
};
// Fast Charging
script bool CellFastCharge()
{
    if (CheckInventory("Cell") < 1) return true;
    
    TakeInventory("Cell", 1);
    FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.5);
    ActivatorSound("regen/shield", 64);
    AddShield(10);
    
    return true;
};

// Shield Damage
script void BoosterShieldDamage(int DamageAmount)
{
    int Chance = 6;
    Chance += 19 * DamageAmount / 65;
    if (Chance > 25)
        Chance = 25;
    
    if (Random(1, 100) <= Chance)
    {
        int TID = UniqueTID();
        fixed Angle = GetActorAngle(0);
        fixed X = GetActorX(0) + Cos(Angle) * 48.0;
        fixed Y = GetActorY(0) + Sin(Angle) * 48.0;
        fixed DirX = Cos(Angle);
        fixed DirY = Sin(Angle);
        fixed Z = GetActorZ(0);
        
        Spawn("DRPGShieldBooster", X, Y, Z, TID, Angle);
        SetActorVelocity(TID, DirX * RandomFixed(8.0, 16.0), DirY * RandomFixed(8.0, 16.0), RandomFixed(4.0, 8.0), false, false);
    };
};

script void SpookyDamage(int DamageAmount)
{
    if (Random(1, 8) == 1)
        GiveInventory("PowerShieldGhost", 1);
};

script void TimeyWimeyHurtyBallZDoomSucks()
{
    // Note for future endeavours: PowerTimeFreezer will always work on an even tic, but never odd ones.
    // See: https://github.com/rheit/zdoom/blob/master/src/g_shared/a_artifacts.cpp#L1502
    
    while (Timer() & 1) Delay(1);
    
    GiveInventory("DRPGShieldTimePause", 1);
    Delay(35);
    TakeInventory("PowerShieldTimeFreezer", 1);
};

script void TimeyWimeyHurtyBall(int DamageAmount)
{
    TimeyWimeyHurtyBallZDoomSucks();
};

script void StaticChargeShieldDamage(int DamageAmount)
{
    int projtid = UniqueTID();
    SpawnProjectile(0, "DRPGStaticChargeShieldExplosion", 0, 0, 0, false, projtid);
    SetActorPosition(projtid, GetActorX(0), GetActorY(0), GetActorZ(0) + 32.0, false);
};

script void CounterDamage(int DamageAmount)
{
    if (Player.DamageType == DT_MELEE)
        GiveInventory("DRPGShieldCounterBlast", 1);
};

script void RegenShieldDamage(int DamageAmount)
{
    Player.Shield.AccessoryBattery = 0;
};

// Shield Depletion
script void NovaShieldBreak()
{
    if (Random(1, 4) == 1)
        Nova("BFGBall", Random(4, 16));
};

script void TeleportPostDamageStop()
{
    Delay(1);
    SetActorVelocity(0, 0, 0, 0);
};

script void TeleportBreak()
{
    if (Player.Shield.AccessoryBattery)
    {
        FadeRange(118, 255, 112, 0.5, 118, 255, 112, 0, 1.0);
        SetActorPosition(0, Player.Shield.AccessoryPosition.X, Player.Shield.AccessoryPosition.Y, Player.Shield.AccessoryPosition.Z, true);
        SetActorAngle(0, Player.Shield.AccessoryPosition.Angle);
        SetActorPitch(0, Player.Shield.AccessoryPosition.Pitch);
        TeleportPostDamageStop();
    };
};

script void AdaptiveBreak()
{
    switch (Player.DamageType)
    {
    case DT_NORMAL:     GiveInventory("DRPGShieldAdaptiveNormalResist", 1);     break;
    case DT_TOXIC:      GiveInventory("DRPGShieldAdaptiveToxicResist", 1);      break;
    case DT_MELEE:      GiveInventory("DRPGShieldAdaptiveMeleeResist", 1);      break;
    case DT_FIRE:       GiveInventory("DRPGShieldAdaptiveFireResist", 1);       break;
    case DT_PLASMA:     GiveInventory("DRPGShieldAdaptivePlasmaResist", 1);     break;
    case DT_LIGHTNING:  GiveInventory("DRPGShieldAdaptiveLightningResist", 1);  break;
    };
};

script void StaticChargeShieldBreak()
{
    int projtid = UniqueTID();
    SpawnProjectile(0, "DRPGStaticChargeShieldLargeExplosion", 0, 0, 0, false, projtid);
    SetActorPosition(projtid, GetActorX(0), GetActorY(0), GetActorZ(0) + 32.0, false);
};

script void FlanExplosion() // This gets called on full charge too
{
    if (CurrentLevel->UACBase && !ArenaActive) return;
    
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        GiveActorInventory(Players(i).TID, "DRPGShieldRadialExplosionResist", 1);
        
        // Turret needs protection too
        if (Players(i).Turret.Active)
            GiveActorInventory(Players(i).Turret.TID, "DRPGShieldRadialExplosionResist", 1);
    };
    
    GiveInventory("DRPGShieldRadialExplosionMaker", 1);
};

script void SpaghettiShieldBreak()
{
    if (GetCVar("drpg_shield_armorremove"))
    {
        if (Player.Shield.ArmorType == "None" || !Player.Shield.AccessoryBattery)
            return;
    }
    else
    {
        if (CheckInventory("Armor") == 0 || CheckInventory("Armor") >= GetArmorInfo(ARMORINFO_SAVEAMOUNT) || !Player.Shield.AccessoryBattery)
            return;
    };
    
    FadeRange(0, 255, 0, 0.5, 0, 255, 0, 0, 1.0);
    if (GetCVar("drpg_shield_armorremove"))
        Player.Shield.ArmorAmount = Player.Shield.ArmorMax
    else
        GiveInventory(GetArmorInfoString(ARMORINFO_CLASSNAME), 1);
    ActivatorSound("skills/repair", 127);
    Player.Shield.AccessoryBattery = 0;
};

// Shield Recharge
script void SpaghettiShieldFullCharge()
{
    Player.Shield.AccessoryBattery = 1;
};

script void TeleportFullCharge()
{
    Player.Shield.AccessoryBattery = 1; // Indicate we have a spot
    Player.Shield.AccessoryPosition.X = GetActorX(0);
    Player.Shield.AccessoryPosition.Y = GetActorY(0);
    Player.Shield.AccessoryPosition.Z = GetActorZ(0);
    Player.Shield.AccessoryPosition.Angle = GetActorAngle(0);
    Player.Shield.AccessoryPosition.Pitch = GetActorPitch(0);
};

// Stat Modifiers / Shield Maintenance
script void X7Mod()
{
    if (Player.Shield.Active)
        if (CheckWeapon("Fist") || CheckWeapon("Knuckle") || CheckWeapon("RLFistRedux"))
            Player.TotalDamage *= 2;
};

script void AmpShieldMod()
{
    if (Player.Shield.Active)
    {
        if (Player.Shield.AccessoryBattery > 0)
        {
            Player.TotalDamage *= 2;
            Player.Shield.AccessoryBattery--;
        };
        
        if (Player.Shield.Charge >= Player.Shield.Capacity)
        {
            int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);

            if (Buttons & BT_ATTACK && !Player.InMenu && !Player.InShop && !Player.OutpostMenu)
            {
                PlaySound(0, "shield/amp", 5, 1.0, false, 1.0);
                FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.5);
                Player.Shield.Charge /= 2;
                Player.Shield.AccessoryBattery = 70;
            };
        };
    };
};

script void HurryMod()
{
    Player.Shield.Capacity /= 2;
    Player.Shield.DelayRate /= 2;
};

script void Def2Mod()
{
    Player.Shield.Capacity *= 2;
    Player.Shield.DelayRate *= 2;
};

script void BlzutMod()
{
    Player.Shield.Capacity /= 2;
    Player.Shield.ChargeRate *= 2;
};

script void RektMod()
{
    Player.DamageFactor *= 2;
};

script void LightAmpMod()
{
    if (Player.Shield.Active && Player.Shield.Charge >= Player.Shield.Capacity)
        SetInventory("PowerShieldLightAmp", 1)
    else
        TakeInventory("PowerShieldLightAmp", 1);
};

script void LightAmpUnequip(bool EMP)
{
    TakeInventory("PowerShieldLightAmp", 1);
};

script void InvisibilityMod()
{
    if (Player.Shield.Active && Player.Shield.Charge >= Player.Shield.Capacity)
        SetInventory("PowerShieldInvisibility", 1)
    else
        TakeInventory("PowerShieldInvisibility", 1);
};

script void InvisibilityUnequip(bool EMP)
{
    TakeInventory("PowerShieldInvisibility", 1);
};

script void LazyMod()
{
    if (!IsPlayerMoving())
        Player.Shield.ChargeRate *= 2
    else
        Player.Shield.ChargeRate = 0;
};

script void AccelerativeShieldMod()
{
    if (Player.Shield.Capacity < 1)
        return;

    int AccelCharge = Player.Shield.ChargeRate;
    AccelCharge += (Player.Shield.ChargeRate * 3) * Player.Shield.Charge / Player.Shield.Capacity;
    Player.Shield.ChargeRate = AccelCharge;
};

script void TheKillingBoosterMod()
{
    Player.Shield.Capacity /= 2;
    if (Player.Shield.Active)
        Player.TotalDamage = Player.TotalDamage * 1.5;
};

script void MinuteMaidMod()
{
    int Minutes = Timer() / (35 * 60);
    Player.Shield.ChargeRate += Minutes;
    Player.Shield.DelayRate -= Minutes * 0.1;
};

script void AmericaShieldMod()
{
    int ExtraCapacity = (Player.Shield.Capacity * 3) * Player.RankLevel / MAX_RANK;
    Player.Shield.Capacity += ExtraCapacity;
};

script void GhettoLuckMod()
{
    int Luck = 50 - (Player.Luck / 2);
    
    Player.HealthChance += Luck * LUCK_HEALTHCHANCE;
    Player.EPChance += Luck * LUCK_EPCHANCE;
    Player.ArmorChance += Luck * LUCK_ARMORCHANCE;
    Player.PowerupChance += Luck * LUCK_POWERUPCHANCE;
    Player.WeaponChance += Luck * LUCK_WEAPONCHANCE;
    Player.ModuleChance += Luck * LUCK_MODULECHANCE;
    Player.AugChance += Luck * LUCK_AUGCHANCE;
    Player.ShieldChance += Luck * LUCK_SHIELDCHANCE;
    Player.StimChance += Luck * LUCK_STIMCHANCE;
};

script void SuperSqueezyScalarMod()
{
    Player.Shield.Capacity = Player.Shield.Capacity * (1.0 + (Player.Capacity * 0.005)) + 1;
    Player.Shield.ChargeRate += (Player.Energy / 10);
    Player.Shield.DelayRate = Player.Shield.DelayRate - ((fixed)Player.Regeneration / 50.0);
};

script void ReflectionMod()
{
    if (Player.Shield.Active && Player.Shield.Charge)
        GiveInventory("DRPGShieldReflection", 1)
    else
        GiveInventory("DRPGShieldReflectionOff", 1);
};

script void ReflectionUnequip(bool EMP)
{
    GiveInventory("DRPGShieldReflectionOff", 1);
};

script void ScarletWeatherRhapsodyShieldMod()
{
    if (!Player.Shield.Active || Player.Shield.Capacity < 1)
        return;
    
    if (Player.Shield.Charge < 1)
    {
        Player.DamageFactor = 1.0;
        return;
    };
    
    fixed BaseFactorMinus = 1.0 - Player.DamageFactor;
    Player.DamageFactor -= (0.75 - BaseFactorMinus) - ((0.75 - BaseFactorMinus) * ((fixed)(Player.Shield.Charge - 1) / (fixed)(Player.Shield.Capacity - 1)));
};

script void SanicMod()
{
    int Movement = VectorLength(GetActorVelX(0), GetActorVelY(0));
    
    if (Movement > 30)
        Movement = 30;
    
    Player.Shield.Interval -= Movement;
};

script void NakedMod()
{
    if (Player.Shield.Active && CheckInventory("Armor") > 0)
        GiveInventory("DRPGShieldNakedResist", 1);
};

script void BloodyShieldSoRealMod()
{
    if (Player.Shield.AccessoryBattery)
    {
        Player.Shield.Interval /= 5;
        Player.Shield.AccessoryBattery--;
    };
};

script void FriendshipShieldMod()
{
    fixed TotalDefense = 0;
    
    for (int i = 0; i < MAX_PLAYERS; i++)
    {
        if (!PlayerInGame(i))
            continue;
        if (!Players(i).Shield.Active)
            continue;
        if (!Players(i).Shield.Accessory || Players(i).Shield.Accessory->PassiveEffect != SHIELD_PASS_FRIENDSHIPISDEFENSE)
            continue;
        
        TotalDefense += 0.1;
    };
    
    Player.DamageFactor -= TotalDefense;
};

script void RegenShieldMod()
{
    int BaseCharge = Player.Shield.ChargeRate / 2;
    int AddCharge = Player.Shield.ChargeRate * 4 - BaseCharge;
    Player.Shield.ChargeRate = AddCharge * Player.Shield.AccessoryBattery / 20 + BaseCharge;
};

script void MLGNoScopeShieldMod()
{
    int Extra = 0;
    if (Player.Strength     >= 100) Extra += 100;
    if (Player.Defense      >= 100) Extra += 100;
    if (Player.Vitality     >= 100) Extra += 100;
    if (Player.Energy       >= 100) Extra += 100;
    if (Player.Regeneration >= 100) Extra += 100;
    if (Player.Agility      >= 100) Extra += 100;
    if (Player.Capacity     >= 100) Extra += 100;
    if (Player.Luck         >= 100) Extra += 100;
    
    Player.Shield.Capacity += Extra;
};

script void RussianRouletteMod()
{
    if (Player.Shield.Active)
    {
        Player.DamageFactor = 11.0; // Let's crank this up to eleven
        Player.SurvivalBonus = (5.0 / 6.0) * 100.0;
    };
};

script void OCDShieldMod()
{
    Player.Shield.Capacity += AllBonusMaps * 20;
    Player.Shield.ChargeRate += AllBonusMaps / 2;
    Player.Shield.DelayRate -= (fixed)AllBonusMaps * 0.2;
};

script void ArenaShieldMod()
{
    int ArenaCompletes = ArenaMaxWave - 1;
    if (ArenaCompletes > 100)
        ArenaCompletes = 100;
    Player.Shield.Capacity += ArenaCompletes * 10;
    Player.Shield.ChargeRate += ArenaCompletes / 4;
    Player.Shield.DelayRate -= (fixed)ArenaCompletes * 0.1;
};

script void HowDidYouEvenMod()
{
    int DelayRate = Player.Shield.DelayRate;
    Player.Shield.DelayRate = Player.Shield.ChargeRate;
    Player.Shield.ChargeRate = DelayRate;
};

script void SayItOhYeahOhBaby() // OH YEEEEEEEEAH!
{
    Delay(8);
    ActivatorSound("shield/ohyeah", 127);
};

script void OhYeahMod()
{
    if (Timer() == 10 && !CurrentLevel->UACBase)
    {
        FadeRange(255, 128, 0, 0.5, 255, 128, 0, 0.0, 0.5);
        GiveInventory("DRPGShieldRadialExplosion", 1);
        for (int i = 0; i < MAX_PLAYERS; i++)
            GiveActorInventory(Players(i).TID, "DRPGShieldRadialExplosionResist", 1);
        SayItOhYeahOhBaby();
    };
};

script void McDuckMod()
{
    int Capacity = CheckInventory("DRPGCredits") / 10000 * 50;
    
    if (Capacity > 5000)
        Capacity = 5000;
    
    Player.Shield.Capacity += Capacity;
};

script void AmmoSpaceMod()
{
    Player.Shield.Capacity /= 4;
    Player.Shield.ChargeRate /= 2;
    Player.Shield.DelayRate *= 4;
    if (Player.Shield.Active && Player.Shield.Charge >= Player.Shield.Capacity)
        SetInventory("PowerShieldInfiniteAmmo", 1)
    else
        TakeInventory("PowerShieldInfiniteAmmo", 1);
};

script void AmmoSpaceUnequip(bool EMP)
{
    TakeInventory("PowerShieldInfiniteAmmo", 1);
};

script void TheAmazingBatteryShieldMod()
{
    if (Player.Augs.Battery >= 100)
        Player.Shield.Capacity *= 2;
};

script void LilZiggyMod()
{
    Player.Shield.Capacity += Player.Shield.ChargeRate;
};

script void MurderBurgerMod()
{
    int MonstersKilled = GetLevelInfo(LEVELINFO_KILLED_MONSTERS);
    if (MonstersKilled > 250)
        MonstersKilled = 250;
    Player.Shield.Capacity += MonstersKilled * 10;
};

script void LuckyBastardMod()
{
    if (Player.Shield.Active)
    {
        int CombinedStat = Player.Agility + Player.Luck;
        
        Player.SurvivalBonus = (fixed)CombinedStat / 10.0;
        
        if (Player.Augs.Level[AUG_AGILITY] >= 4)
            Player.SurvivalBonus *= 2;
        
        if (Player.Perks[STAT_AGILITY])
            Player.SurvivalBonus += 30;
    };
};

script void IronShieldMod()
{
    Player.Shield.Capacity += Player.ActualHealth / 100 * 20;
};

script void EPRegenSwapperMod()
{
    if (Player.Shield.Active)
        Player.EPAmount = Player.Shield.ChargeRate;
};

script void HoarderMod()
{
    int BaseCharge = Player.Shield.ChargeRate;
    int AddCharge;
    
    if (CheckInventory("PowerInvulnerable"))
        AddCharge += BaseCharge;
    if (CheckInventory("PowerInvisibility") || CheckInventory("PowerShadow"))
        AddCharge += BaseCharge;
    if (CheckInventory("PowerTimeFreezer"))
        AddCharge += BaseCharge;
    if (CheckInventory("PowerIronFeet"))
        AddCharge += BaseCharge;
    if (CheckInventory("PowerLightAmp"))
        AddCharge += BaseCharge;
    if (CheckInventory("PowerStrength"))
        AddCharge += BaseCharge;
    
    Player.Shield.ChargeRate += AddCharge;
};

script void ShieldTimer()
{
    while (true)
    {
        if (Player.Shield.Active)
        {
            // Inventory items for multiplayer/health bar handling
            SetInventory("DRPGShieldCharge", Player.Shield.Charge);
            SetInventory("DRPGShieldChargeMax", Player.Shield.Capacity);
            
            // !! TEMPORARY !!
            // Remove this when DRLA Beta 8 releases!
            // This is a stopgap in the meantime to prevent you from equipping armors while the shield is active if you have that CVAR enabled
            if (GetCVar("drpg_shield_armorremove") && CompatMode == COMPAT_DRLA)
                TakeInventory("RLEquippingArmor", 1);
            
            if (Player.Shield.Charge < Player.Shield.Capacity)
                Player.Shield.Full = false;
            
            // Increase Charge
            if (Player.Shield.Timer <= 0)
            {
                int ChargeRate = Player.Shield.ChargeRate;
                if (Player.Shield.Accessory && Player.Shield.Accessory->Charge)
                    ChargeRate = Player.Shield.Accessory->Charge(ChargeRate);
                
                if (ChargeRate && (!Player.Shield.Accessory || Player.Shield.Accessory->PassiveEffect != SHIELD_PASS_KILLSCHARGE))
                {
                    if (Player.Shield.Charge < 1)
                        PlaySound(0, "shield/restart", 5, 1.0, false, 1.0)
                    else if (Player.Shield.Charge < Player.Shield.Capacity)
                        PlaySound(0, "shield/charge", 5, 0.25, false, 2.0);
                    Player.Shield.Charge += ChargeRate;
                };
                
                Player.Shield.Timer = Player.Shield.Interval;
                
                if (Player.Shield.Charge >= Player.Shield.Capacity)
                {
                    // Shield is Full
                    if (!Player.Shield.Full)
                    {
                        Player.Shield.Full = true;
                        PlaySound(0, "shield/full", 5, 1.0, false, 1.0);
                        if (Player.Shield.Accessory && Player.Shield.Accessory->FullCharge)
                            Player.Shield.Accessory->FullCharge();
                    };
                    
                    int OverCharge = Player.Shield.Charge - Player.Shield.Capacity;

                    if (OverCharge > 0 && Player.Shield.Accessory && Player.Shield.Accessory->Overcharge)
                        Player.Shield.Accessory->Overcharge(OverCharge);
                    
                    Player.Shield.Charge = Player.Shield.Capacity;
                };
            };
            
            // Shield Timer
            if (Player.Shield.Timer > 0)
                Player.Shield.Timer--;
        };
        
        // Terminate if you are dead
        if (GetActorProperty(0, APROP_Health) <= 0) return;
        
        Delay(1);
    };
};

script void ShieldDamage(int Amount)
{
    Player.Shield.Full = false;
    
    PlaySound(0, "shield/hit", 5, 1.0, false, 1.0);
    if (Player.Shield.Accessory && Player.Shield.Accessory->Damage)
        Player.Shield.Accessory->Damage(Amount);
};

script void ShieldBroken()
{
    PlaySound(0, "shield/empty", 5, 1.0, false, 1.0);
    
    if (Player.Shield.Accessory && Player.Shield.Accessory->Break)
        Player.Shield.Accessory->Break();
};

script void ShieldTimerReset()
{
    Player.Shield.Timer = 35.0 * Player.Shield.DelayRate;
};

script bool ActivateShield()
{
    if (Player.Shield.Active)
        return true;
    
    if (!Player.Shield.Body || !Player.Shield.Battery || !Player.Shield.Capacitor)
    {
        PrintError("Your shield is incomplete and is missing one or more parts");
        ActivatorSound("menu/error", 127);
        return false;
    };
    
    if (Player.StatusType[SE_EMP])
    {
        PrintError("Your shield cannot be activated while EMP is active");
        ActivatorSound("menu/error", 127);
        return false;
    };
    
    if (Player.Shield.Capacity <= 0)
    {
        PrintError("Your shield has no charge capacity and cannot be activated");
        ActivatorSound("menu/error", 127);
        return false;
    };

    FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.25);
    
    if (Player.Shield.Accessory && Player.Shield.Accessory->Equip)
        Player.Shield.Accessory->Equip();
    
    GiveInventory("DRPGShieldOn", 1);
    PlaySound(0, "shield/on", 5, 1.0, false, 1.0);
    Player.Shield.Active = true;
    if (GetCVar("drpg_shield_armorremove"))
    {
        Player.Shield.ArmorType = GetArmorInfoString(ARMORINFO_CLASSNAME);
        Player.Shield.ArmorAmount = CheckInventory("Armor");
        Player.Shield.ArmorMax = GetArmorInfo(ARMORINFO_SAVEAMOUNT);
        
        // DRLA Compatibility
        if (CompatMode != COMPAT_DRLA)
            TakeInventory("BasicArmor", Player.Shield.ArmorAmount);
        if (CompatMode == COMPAT_DRLA && !Contains(Player.Shield.ArmorType, "Shield") && !Contains(Player.Shield.ArmorType, "Cybernetic"))
        {
            TakeInventory("BasicArmor", Player.Shield.ArmorAmount);
            RemoveDRLAArmorToken(Player.Shield.ArmorType);
            
            TakeInventory("RL100ArmorWorn", 1);
            TakeInventory("RL150ArmorWorn", 1);
            TakeInventory("RL200ArmorWorn", 1);
            TakeInventory("RL100RegenArmorWorn", 1);
            TakeInventory("RLIndestructibleArmorWorn", 1);
        };
    };
    ShieldTimerReset();
    
    return true;
};

script bool DeactivateShield()
{
    if (!Player.Shield.Active)
        return true;
    
    FadeRange(255, 255, 255, 0.25, 255, 255, 255, 0.0, 0.25);
    
    if (Player.Shield.Accessory && Player.Shield.Accessory->Unequip)
        Player.Shield.Accessory->Unequip(Player.StatusType[SE_EMP]);

    GiveInventory("DRPGShieldOff", 1);
    PlaySound(0, "shield/off", 5, 1.0, false, 1.0);
    Player.Shield.Active = false;
    Player.Shield.AccessoryBattery = 0;
    if (GetCVar("drpg_shield_armorremove") && Player.Shield.ArmorType != "None" && !Contains(Player.Shield.ArmorType, "Shield") && !Contains(Player.Shield.ArmorType, "Cybernetic"))
    {
        GiveInventory(Player.Shield.ArmorType, 1);
        TakeInventory("BasicArmor", Player.Shield.ArmorMax - Player.Shield.ArmorAmount);
                
        // DRLA Compatibility
        if (CompatMode == COMPAT_DRLA)
        {
            GiveDRLAArmorToken(Player.Shield.ArmorType);
            
            if (Player.Shield.ArmorMax == 100)
                GiveInventory("RL100ArmorWorn", 1)
            else if (Player.Shield.ArmorMax == 150)
                GiveInventory("RL150ArmorWorn", 1)
            else if (Player.Shield.ArmorMax == 200)
                GiveInventory("RL200ArmorWorn", 1)
            else if (Contains(Player.Shield.ArmorType, "Ablative") ||
                     Contains(Player.Shield.ArmorType, "PoweredArmor") ||
                     Contains(Player.Shield.ArmorType, "Tactical"))
                GiveInventory("RL100RegenArmorWorn", 1)
            else if (Player.Shield.ArmorMax == 99999)
                GiveInventory("RLIndestructibleArmorWorn", 1);
        };
    };
    if (GetCVar("drpg_shield_reset") || Player.StatusType[SE_EMP])
        Player.Shield.Charge = 0;
    
    return true;
};

acscript void ToggleShield() net
{
    // If you're dead, terminate
    if (GetActorProperty(0, APROP_Health) <= 0) return;
    
    if (!Player.Shield.Active)
        ActivateShield()
    else
        DeactivateShield();
};

function void RemoveShieldAccessory()
{
    if (Player.Shield.Accessory->Unequip)
        Player.Shield.Accessory->Unequip(false);
    
    Player.Shield.AccessoryBattery = 0;
    Player.Shield.Accessory = nullptr;
};

function void SetShieldAccessory(ShieldAccsPtr Accessory)
{
    if (Player.Shield.Accessory)
        RemoveShieldAccessory();

    Player.Shield.Accessory = Accessory;
    if (Player.Shield.Accessory->Equip)
        Player.Shield.Accessory->Equip();
};

acscript void AddShield(int Amount)
{
    if (Player.Shield.Charge >= Player.Shield.Capacity) return;
    
    if (Player.Shield.Active)
    {
        if (Player.Shield.Charge < 1)
            PlaySound(0, "shield/restart", 5, 1.0, false, 1.0)
        else
            PlaySound(0, "shield/charge", 5, 0.25, false, 2.0);
    };
    FadeRange(0, 255, 255, 0.25, 0, 255, 255, 0, 0.25);
    if (Player.Shield.Charge + Amount > Player.Shield.Capacity)
        Amount = Player.Shield.Capacity - Player.Shield.Charge;
    
    Player.Shield.Charge += Amount;
};

acscript void AddRemoteShield(int TID, int Amount)
{
    SetActivator(TID);
    if (PlayerNumber() < 0) return;
    AddShield(Amount);
};

function void CheckShields()
{
    ShieldPartPtr BodyPtr = Player.Shield.Body;
    ShieldPartPtr BatteryPtr = Player.Shield.Battery;
    ShieldPartPtr CapacitorPtr = Player.Shield.Capacitor;
    ShieldAccsPtr AccessoryPtr = Player.Shield.Accessory;
    
    // Check to make sure the Shield has components
    if (!CheckShieldValid())
        if (Player.Shield.Active)
            DeactivateShield();
    
    // EP -> Shield Charging
    int Buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
    if (Player.Shield.Active && (!Player.InMenu && !Player.InShop) && Buttons & BT_SPEED && Buttons & BT_USE && Player.Shield.Charge < Player.Shield.Capacity)
    {
        bool SkipEPCharge = false;
        
        if (Player.Shield.Accessory && Player.Shield.Accessory->FastCharge)
            SkipEPCharge = Player.Shield.Accessory->FastCharge();
        
        if (!SkipEPCharge && Player.EP > 0)
        {
            FadeRange(0, 255, 255, 0.1, 0, 255, 255, 0.0, 0.5);
            ActivatorSound("regen/shield", 64);
            Player.EP--;
            Player.Shield.Charge++;
        };
    };
    
    // If a part is sold/dropped/nuked from orbit/etc, unequip it
    if (BodyPtr &&      !CheckInventory(BodyPtr->Actor))        Player.Shield.Body = nullptr;
    if (BatteryPtr &&   !CheckInventory(BatteryPtr->Actor))     Player.Shield.Battery = nullptr;
    if (CapacitorPtr && !CheckInventory(CapacitorPtr->Actor))   Player.Shield.Capacitor = nullptr;
    if (AccessoryPtr && !CheckInventory(AccessoryPtr->Actor))   RemoveShieldAccessory();
    
    // Apply Components stats to Shield
    Player.Shield.Capacity = (BodyPtr ? BodyPtr->Capacity : 0) + (BatteryPtr ? BatteryPtr->Capacity : 0) + (CapacitorPtr ? CapacitorPtr->Capacity : 0);
    Player.Shield.ChargeRate = (BodyPtr ? BodyPtr->ChargeRate : 0) + (BatteryPtr ? BatteryPtr->ChargeRate : 0) + (CapacitorPtr ? CapacitorPtr->ChargeRate : 0);
    Player.Shield.DelayRate = 5.0 + (BodyPtr ? BodyPtr->DelayRate : 0) + (BatteryPtr ? BatteryPtr->DelayRate : 0) + (CapacitorPtr ? CapacitorPtr->DelayRate : 0);
    Player.Shield.Interval = 35;
    
    if (CompatMode == COMPAT_DRLA && PlayerClass(PlayerNumber()) == 2)
    {
        // Technicians can use shields slightly better.
        Player.Shield.Capacity += Player.Shield.Capacity >> 3;
        Player.Shield.ChargeRate += 2;
        Player.Shield.DelayRate -= 2;
    };
};

function void CheckShieldAccessory()
{
    if (Player.Shield.Accessory && Player.Shield.Accessory->Modifier)
        Player.Shield.Accessory->Modifier();
};

function bool CheckShieldValid()
{
    ShieldPartPtr BodyPtr = Player.Shield.Body;
    ShieldPartPtr BatteryPtr = Player.Shield.Battery;
    ShieldPartPtr CapacitorPtr = Player.Shield.Capacitor;
    
    return (BodyPtr && BatteryPtr && CapacitorPtr);
};
